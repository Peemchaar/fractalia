import { Component, OnInit, ViewEncapsulation, ViewChild, ElementRef } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { PentestingService } from 'src/app/services/pentesting.service';
import { ActivatedRoute, Router } from '@angular/router';
import { PartnerService } from 'src/app/services/partner.service';
import { externalAppAcunetix } from 'src/app/models/externallAppAcunetix';
import { MessageService } from 'src/app/services/message.service';
import { UserService } from 'src/app/services/user.service';
import { LocalService } from 'src/app/services/local.service';

@Component({
  selector: 'app-pentesting',
  templateUrl: './pentesting.component.html',
  styleUrls: ['./pentesting.component.scss'],
  encapsulation: ViewEncapsulation.None
})
export class PentestingComponent implements OnInit {

  private regex1 = new RegExp(/(http|https)\:\/\/[a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/gi);
  public loading: boolean = true;
  @ViewChild('headerList') private headerList:ElementRef;

  constructor(public pentestingService: PentestingService,
    private partnerService: PartnerService,
    private userService: UserService,
    private router: Router,
    private activatedRoute: ActivatedRoute,
    private messageService: MessageService,
    private translate: TranslateService,
    private localService: LocalService) {
  }

  async ngOnInit() {
    var partnerSuiteId;
    if (this.pentestingService.serviceId) {
      if (this.getLocalStorage('currentService') == null) {
        this.router.navigate(['/']);
        return;
      }
      else { // If refresh
        let service = this.getLocalStorage('currentService');
        this.pentestingService.serviceId = service.id;
        this.pentestingService.serviceName = service.name;
        this.pentestingService.serviceIcon = service.icon;
        this.pentestingService.serviceDesc = service.desc;
        this.pentestingService.longDesc = service.longDesc;
        this.userService.selSuiteName = localStorage.getItem('suiteName');
        partnerSuiteId = localStorage.getItem('partnerSuiteId');
      }
    }
    else {
      let service = this.getLocalStorage('currentService');
      this.pentestingService.serviceId = service.id;
      this.pentestingService.serviceName = service.name;
      this.pentestingService.serviceIcon = service.icon;
      this.pentestingService.serviceDesc = service.desc;
      this.pentestingService.longDesc = service.longDesc;
      this.userService.selSuiteName = localStorage.getItem('suiteName');
      partnerSuiteId = localStorage.getItem('partnerSuiteId');
    }
    // await this.pentestingService.getPentestingSingle(partnerSuiteId);
    await this.pentestingService.getPentesting(partnerSuiteId).then(() => this.loading = false)
    this.pentestingService.loadPentestingDataView();
  }

  ngAfterViewInit () {
    this.activatedRoute.params.subscribe(val => {
      var param = this.activatedRoute.snapshot.paramMap.get('param');
      if (typeof param === 'string')
        document.getElementById(param).scrollIntoView();
    });
  }

  EnabledTxt(txtURL:string){
    let txt = document.getElementById("txtURL" + txtURL) as HTMLInputElement;

    txt.disabled = !txt.disabled;
    if(txt.disabled){
      (document.getElementById("showDisc" + txtURL) as HTMLDivElement).style.display = "none";
    }
    else (document.getElementById("showDisc" + txtURL) as HTMLDivElement).style.display = "block";
  }

  lanzarAnalisis(numUrl:string){
    const checkA = document.getElementById("checkA" + numUrl) as HTMLInputElement;
    const checkB = document.getElementById("checkB" + numUrl) as HTMLInputElement;
    const txt = document.getElementById("txtURL" + numUrl) as HTMLInputElement;
    const id:number =  +txt.getAttribute("data-acunetixId");

    if(id>0){
      //actualizacion
      let acunetix: externalAppAcunetix = new externalAppAcunetix();
      acunetix.acunetixId = id;
      acunetix.url = txt.value;
      const UrlAnt = this.pentestingService.listInput.find(x=>x.acunetixId==id).url;

      if(txt.value=="" || this.ValidUrl(acunetix,numUrl)){
        this.pentestingService.putPentesting(acunetix);
      }
      else{
        txt.value = UrlAnt;
      }
    }
    else{
      //nuevo registro
      let acunetix: externalAppAcunetix = new externalAppAcunetix();
      acunetix.url = txt.value;
      acunetix.numUrl = +numUrl;
      acunetix.acunetixId = -1;

      if(this.ValidUrl(acunetix,numUrl)){
        this.pentestingService.postPentesting(acunetix);
        // this.reloadComponent();
      }
      else{
        txt.value = "";
      }
    }
    checkB.checked = false;
    checkA.checked = false;
    (document.getElementById("btnLanzarAnalisis" + numUrl) as HTMLInputElement).disabled=true;

    if(this.pentestingService.hasPentestingInfo){
      const showDisc = document.getElementById("showDisc" + numUrl) as HTMLDivElement;
      if(showDisc) showDisc.style.display = "none";
      txt.disabled=true;
    }
  }

  checkTerms(numUrl:string){
    if((document.getElementById("checkA" + numUrl) as HTMLInputElement).checked && (document.getElementById("checkB" + numUrl) as HTMLInputElement).checked){
      (document.getElementById("btnLanzarAnalisis" + numUrl) as HTMLInputElement).disabled=false;
    }
    else
      (document.getElementById("btnLanzarAnalisis" + numUrl) as HTMLInputElement).disabled=true;
  }

  // reloadComponent() {
  //   let currentUrl = this.router.url;
  //       this.router.routeReuseStrategy.shouldReuseRoute = () => false;
  //       this.router.onSameUrlNavigation = 'reload';
  //       this.router.navigate([currentUrl]);
  //   }

  ScrollHistory():void{
    document.getElementById('headerList').scrollIntoView();
  }


  ValidUrl(acunetix:externalAppAcunetix, numUrl:string){
    if (acunetix.url.substr(0, 4) != "http") {
      acunetix.url = "http://" + acunetix.url;
    }
    if (!acunetix.url.match(this.regex1)) {
      this.messageService.add(this.translate.instant("CYBERSECURITY.PENTESTING.MESSAGE.TEXT11"), "error");
      return false;
    }

    if(this.pentestingService.listInput
      && this.pentestingService.listInput.length>0
      && this.pentestingService.listInput.some(x=>x.url==acunetix.url && x.acunetixId!=acunetix.acunetixId)){
      (document.getElementById("checkA" + numUrl) as HTMLInputElement).checked=false;
      (document.getElementById("checkB" + numUrl) as HTMLInputElement).checked=false;
      (document.getElementById("txtURL" + numUrl) as HTMLInputElement).value = "";
      this.messageService.add(this.translate.instant('CYBERSECURITY.PENTESTING.MESSAGE.URL_REPEAT').replace("{{url}}", acunetix.url), "error");
      return false;
    }
    return true;
  }

  getLocalStorage(key) {
    return this.localService.getJsonValue(key); 
  }

  async getPDF(id) {

    await this.userService.getPdf(id).then(res =>{
      this.downloadPdfFile(res, 'Report')
    })
    
  }

  getLastReport(){
    const lastReport = this.pentestingService.AcunetixIMG.acunetixId
    this.getPDF(lastReport)
  }

  downloadPdfFile(bas64Data: string, fileName: string) {
    const buffer = this.base64ToArrayBuffer(bas64Data);
    const blob = new Blob([buffer], { type: 'application/pdf' });
    if (navigator.msSaveOrOpenBlob) {
      return navigator.msSaveOrOpenBlob(blob, `${fileName}.pdf`);
    }
    const link = document.createElement('a');
    link.href = window.URL.createObjectURL(blob);
    link.download = fileName;
    window.open(link.href, '_blank');
  }

  base64ToArrayBuffer(base64) {
    const binaryString = atob(base64)
    const binaryLen = binaryString.length;
    const bytes = new Uint8Array(binaryLen);
    for (let i = 0; i < binaryLen; i++) {
      const ascii = binaryString.charCodeAt(i);
      bytes[i] = ascii;
    }

    return bytes;
  }

}
