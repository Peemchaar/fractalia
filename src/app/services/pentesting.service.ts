import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { environment } from 'src/environments/environment';
import { externalAppAcunetix } from 'src/app/models/externallAppAcunetix';
import { Label, MultiDataSet } from 'ng2-charts';
import { ChartType } from 'chart.js';
import * as Chart from 'chart.js';
import { MessageService } from './message.service';
import { TranslateService } from '@ngx-translate/core';
import { UserService } from './user.service';

@Injectable({
  providedIn: 'root'
})
export class PentestingService {
  public serviceId: number;
  public serviceName: string;
  public serviceIcon: string;
  public serviceDesc: string;
  public longDesc: string;
  public NumMaxUrl:number;
  public diasProximoAnalisis:number;
  public urlProximoAnalisis:string;
  public externalAppAcunetixList: externalAppAcunetix[];
  public externalAppAcunetix: externalAppAcunetix;
  public totalAlerts: number;
  public hasPentestingInfo: boolean = false;
  public AcunetixIMG: externalAppAcunetix = new externalAppAcunetix();
  public ListAcunetixHistory: externalAppAcunetix[] = [];
  public listInput:externalAppAcunetix[];
  public listHistory:externalAppAcunetix[];
  public loadAcunetixIMG: boolean = false;
  public hasHistory: boolean = false;
  public loading: boolean = true;
  public chartLabels: Label[] = ["Altas", "Medias", "Bajas", "Info"];
  public chartData = [];
  public doughnutChartData: MultiDataSet = [this.chartData];
  public chartType: ChartType = 'doughnut';
  public doughnutColors: any[] = [{ backgroundColor: ["#ff0062", "#fea953", "#1bb77a", "#ac328e"] }];
  constructor(private http: HttpClient,
    private messageService: MessageService,
    private translate: TranslateService,
    private userService: UserService) {
    Chart.defaults.global.tooltips.enabled = false;
    Chart.defaults.global.animation.duration = 2000;
    Chart.defaults.global.legend.display = false
  }

  public async getPentesting(partnersuiteId: number) {
    this.externalAppAcunetixList = [];
    this.ListAcunetixHistory = [];
    this.AcunetixIMG = new externalAppAcunetix();
    this.loadAcunetixIMG = false;
    this.hasPentestingInfo = false;
    this.hasHistory = false;
    let params = new HttpParams();
    params = params.set('partnerSuiteId', partnersuiteId.toString());

    return this.http.get<any>(environment.apiEndpoint + "api/acunetix", { params }).toPromise().then(result => {
      this.NumMaxUrl = result.item1;
      this.externalAppAcunetixList = result.item2;
    });
  }

/******** externalAppAcunetix status *******************
 * 1 (Registrado) : Insertado por la WebApi en la tabla ExternalAppAcunetix
 * 2 (Recibido)   : Enviado a la api de acunetix por la aplicacion SyncAcunetix
 * 3 (Encolado)   : El api de acunetix ya genero el reporte;procesado, pero aun quedan dias segun configuracion del control panel para ser historico
 * 4 (procesado)  : Ya es procesado y es un registro historico
 */

  loadPentestingDataView() {
    if (this.externalAppAcunetixList && this.externalAppAcunetixList.length>0){
      this.hasPentestingInfo = true;
      this.ListAcunetixHistory = this.externalAppAcunetixList.filter(x=> x.uuidResponse && x.reportGenerated);
      let oAcunetix: externalAppAcunetix;
      this.listInput=[];
      this.listHistory=[];
      let diasFaltantes:number=0;

      for (let i = 0; i < this.externalAppAcunetixList.length; i++){
        oAcunetix = this.externalAppAcunetixList[i];
        oAcunetix.status = 0;

        if(!oAcunetix.uuidResponse){
          oAcunetix.status = 1;
          let lst = this.ListAcunetixHistory.filter(x=>x.numUrl == oAcunetix.numUrl).sort(this.ordenarProcesados);
          if(lst.length>0){
            diasFaltantes = oAcunetix.daysConfig-lst[0].days;
            if(diasFaltantes>0){
              oAcunetix.status = 3;
              oAcunetix.days=diasFaltantes;
            }
          }
          this.listInput.push(oAcunetix);
        }
        else if (oAcunetix.uuidResponse && !oAcunetix.reportGenerated){
          oAcunetix.status = 2;
          this.listInput.push(oAcunetix);
        }
      }

      //obtener el acunetixIMG
      if(this.ListAcunetixHistory.length>0){
        this.AcunetixIMG = this.ListAcunetixHistory.sort(this.ordenarProcesados)[0];
        this.AcunetixIMG.status=3;
        if (this.chartData.length > 0)
          this.chartData = [];
        this.totalAlerts = this.AcunetixIMG.reportAlertsHigh + this.AcunetixIMG.reportAlertsMedium + this.AcunetixIMG.reportAlertsLow + this.AcunetixIMG.reportAlertsInfo;
        this.chartData.push(this.AcunetixIMG.reportAlertsHigh);
        this.chartData.push(this.AcunetixIMG.reportAlertsMedium);
        this.chartData.push(this.AcunetixIMG.reportAlertsLow);
        this.chartData.push(this.AcunetixIMG.reportAlertsInfo);
        this.hasHistory = this.ListAcunetixHistory.length>1;
      }
      else if(this.listInput.length>0){
        this.AcunetixIMG = this.listInput[0];
      }
      this.diasProximoAnalisis=365;
      this.listInput.forEach(x=>{
         if(x.days && x.days<this.diasProximoAnalisis){
          this.diasProximoAnalisis=x.days;
          this.urlProximoAnalisis = x.url;
         }
      });
      this.loadAcunetixIMG = true;

      if(this.NumMaxUrl > this.listInput.length){
        const inicio = this.listInput.length;
        for (let i = inicio; i < this.NumMaxUrl; i++) {
          oAcunetix = new externalAppAcunetix();
          oAcunetix.numUrl = i+1;
          oAcunetix.status = 0;
          oAcunetix.acunetixId = -1;
          this.listInput.push(oAcunetix);
        }
      }
    }
  }

  ordenarProcesados(x,y){
       if (x.reportGenerated > y.reportGenerated) return -1;
        if (x.reportGenerated < y.reportGenerated) return 1;
        return 0;
  }

  async postPentesting(acunetix: externalAppAcunetix) {
    acunetix.partnerSuiteId = this.userService.selSuiteId;
    this.http.post<any>(environment.apiEndpoint + "api/acunetix", acunetix).toPromise().then((result) => {
      if (result && result.item1 && result.item2) {
        this.messageService.add(this.translate.instant("CYBERSECURITY.PENTESTING.MESSAGE.TEXT12"), "ok");
        this.NumMaxUrl = result.item1;
        this.externalAppAcunetixList = result.item2;
        this.loadPentestingDataView();
      }
      else{
        this.messageService.add(this.translate.instant("CYBERSECURITY.PENTESTING.MESSAGE.ERROR_CREATEORUPDATE"), "error");
      }
    });
  }

  public putPentesting(acunetix: externalAppAcunetix) {
    this.http.put<any>(environment.apiEndpoint + "api/acunetix", acunetix).toPromise().then((result) => {
      if(result){
        this.messageService.add(this.translate.instant("CYBERSECURITY.PENTESTING.MESSAGE.TEXT13"), "ok");
      }
      else{
        this.messageService.add(this.translate.instant("CYBERSECURITY.PENTESTING.MESSAGE.ERROR_CREATEORUPDATE"), "error");
      }
    });
  }

  public async getPentestingSingle(partnersuiteId: number) {
    let params = new HttpParams();
    params = params.set('partnerSuiteId', partnersuiteId.toString());
    return this.http.get<externalAppAcunetix>(environment.apiEndpoint + "api/acunetix/single", { params }).toPromise().then(result => {
      if (result) {
        if (this.chartData.length > 0)
          this.chartData = []
        this.externalAppAcunetix = result;
        this.totalAlerts = this.externalAppAcunetix.reportAlertsHigh + this.externalAppAcunetix.reportAlertsMedium + this.externalAppAcunetix.reportAlertsLow + this.externalAppAcunetix.reportAlertsInfo;
        this.chartData.push(this.externalAppAcunetix.reportAlertsHigh);
        this.chartData.push(this.externalAppAcunetix.reportAlertsMedium);
        this.chartData.push(this.externalAppAcunetix.reportAlertsLow);
        this.chartData.push(this.externalAppAcunetix.reportAlertsInfo);
      }
    });
  }
}
